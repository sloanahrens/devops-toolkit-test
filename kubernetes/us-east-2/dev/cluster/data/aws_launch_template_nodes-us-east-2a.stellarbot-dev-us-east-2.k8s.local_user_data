#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.20.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.20.1/nodeup-linux-amd64,https://kubeupv2.s3.amazonaws.com/kops/1.20.1/linux/amd64/nodeup
NODEUP_HASH_AMD64=e492adb6e99f9d5a45dc11f94b94013fcd50a18bf53a5e4b6997c5a0edf0ec24
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.20.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.20.1/nodeup-linux-arm64,https://kubeupv2.s3.amazonaws.com/kops/1.20.1/linux/arm64/nodeup
NODEUP_HASH_ARM64=6690e58212d775b287fc3cf2e7ad3e20e7d8fdcdd00ab76f3cc4d23be90f4c60

export AWS_REGION=us-east-2




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

cat > conf/cluster_spec.yaml << '__EOF_CLUSTER_SPEC'
cloudConfig:
  manageStorageClasses: true
containerRuntime: containerd
containerd:
  configOverride: |
    version = 2

    [plugins]

      [plugins."io.containerd.grpc.v1.cri"]

        [plugins."io.containerd.grpc.v1.cri".containerd]

          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]

            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
              runtime_type = "io.containerd.runc.v2"

              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                SystemdCgroup = true
  logLevel: info
  version: 1.4.4
docker:
  skipInstall: true
kubeProxy:
  clusterCIDR: 100.96.0.0/11
  cpuRequest: 100m
  hostnameOverride: '@aws'
  image: k8s.gcr.io/kube-proxy:v1.20.11
  logLevel: 2
kubelet:
  anonymousAuth: false
  cgroupDriver: systemd
  cgroupRoot: /
  cloudProvider: aws
  clusterDNS: 100.64.0.10
  clusterDomain: cluster.local
  enableDebuggingHandlers: true
  evictionHard: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%
  hostnameOverride: '@aws'
  kubeconfigPath: /var/lib/kubelet/kubeconfig
  logLevel: 2
  networkPluginName: cni
  nonMasqueradeCIDR: 100.64.0.0/10
  podManifestPath: /etc/kubernetes/manifests

__EOF_CLUSTER_SPEC

cat > conf/ig_spec.yaml << '__EOF_IG_SPEC'
{}

__EOF_IG_SPEC

cat > conf/kube_env.yaml << '__EOF_KUBE_ENV'
Assets:
  amd64:
  - 78be617b1d5974b21d533588fcd952b05ef7d8d92b1880fc44b4c0c0457b43db@https://storage.googleapis.com/kubernetes-release/release/v1.20.11/bin/linux/amd64/kubelet
  - 3a2bf981939df89f807858a481f6f5f2e33a7b9708bd029c8bece434db228efe@https://storage.googleapis.com/kubernetes-release/release/v1.20.11/bin/linux/amd64/kubectl
  - 977824932d5667c7a37aa6a3cbba40100a6873e7bd97e83e8be837e3e7afd0a8@https://storage.googleapis.com/k8s-artifacts-cni/release/v0.8.7/cni-plugins-linux-amd64-v0.8.7.tgz
  - 96641849cb78a0a119223a427dfdc1ade88412ef791a14193212c8c8e29d447b@https://github.com/containerd/containerd/releases/download/v1.4.4/cri-containerd-cni-1.4.4-linux-amd64.tar.gz
  arm64:
  - 9c79d22131c6290fbb6f668c0188f9d4c43700372b054bfb4cde7b92a5b0d173@https://storage.googleapis.com/kubernetes-release/release/v1.20.11/bin/linux/arm64/kubelet
  - e1ff97b46bf42ad98790d87924cdd10d65f002e4285e96e9a6df1d4db23c14f5@https://storage.googleapis.com/kubernetes-release/release/v1.20.11/bin/linux/arm64/kubectl
  - ae13d7b5c05bd180ea9b5b68f44bdaa7bfb41034a2ef1d68fd8e1259797d642f@https://storage.googleapis.com/k8s-artifacts-cni/release/v0.8.7/cni-plugins-linux-arm64-v0.8.7.tgz
  - 998b3b6669335f1a1d8c475fb7c211ed1e41c2ff37275939e2523666ccb7d910@https://download.docker.com/linux/static/stable/aarch64/docker-20.10.6.tgz
ClusterName: stellarbot-dev-us-east-2.k8s.local
ConfigBase: s3://stellarbot-dev-k8s-state-us-east-2/stellarbot-dev-us-east-2.k8s.local
InstanceGroupName: nodes-us-east-2a
InstanceGroupRole: Node
KubeletConfig:
  anonymousAuth: false
  cgroupDriver: systemd
  cgroupRoot: /
  cloudProvider: aws
  clusterDNS: 100.64.0.10
  clusterDomain: cluster.local
  enableDebuggingHandlers: true
  evictionHard: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%
  hostnameOverride: '@aws'
  kubeconfigPath: /var/lib/kubelet/kubeconfig
  logLevel: 2
  networkPluginName: cni
  nodeLabels:
    kops.k8s.io/instancegroup: nodes-us-east-2a
    kubernetes.io/role: node
    node-role.kubernetes.io/node: ""
  nonMasqueradeCIDR: 100.64.0.0/10
  podManifestPath: /etc/kubernetes/manifests
channels:
- s3://stellarbot-dev-k8s-state-us-east-2/stellarbot-dev-us-east-2.k8s.local/addons/bootstrap-channel.yaml
protokubeImage:
  amd64:
    hash: c34c9bdd870ca6bcd06f3033518037b9cc597c8c87e1f766cf05db4dc913bc8e
    name: protokube:1.20.1
    sources:
    - https://artifacts.k8s.io/binaries/kops/1.20.1/images/protokube-amd64.tar.gz
    - https://github.com/kubernetes/kops/releases/download/v1.20.1/images-protokube-amd64.tar.gz
    - https://kubeupv2.s3.amazonaws.com/kops/1.20.1/images/protokube-amd64.tar.gz
  arm64:
    hash: 02d1f58c0fbc9217996cfc9c74dfdea2a33b9b09f0216fd61ca6f0a030ded1ff
    name: protokube:1.20.1
    sources:
    - https://artifacts.k8s.io/binaries/kops/1.20.1/images/protokube-arm64.tar.gz
    - https://github.com/kubernetes/kops/releases/download/v1.20.1/images-protokube-arm64.tar.gz
    - https://kubeupv2.s3.amazonaws.com/kops/1.20.1/images/protokube-arm64.tar.gz

__EOF_KUBE_ENV

download-release
echo "== nodeup node config done =="
