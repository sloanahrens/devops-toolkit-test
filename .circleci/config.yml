defaults: &defaults
  docker:
    - image: sloanahrens/devops-toolkit-ci-dev-env:0.3

version: 2
jobs:

  python_linting:
    <<: *defaults
    steps:
      - checkout
      # - run:
      #     name: "Pip Install"
      #     command: pip install flake8>=3.7.7 --user circleci
      # - run:
      #     name: "Python Linting"
      #     command: cd django/stellarbot && python -m flake8 --ignore E501

  javascript_linting:
    <<: *defaults
    steps:
      - checkout

  image_build_test_push:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          version: '20.10.2'
      - run:
          name: Build Images
          command: |
            set -x
            export IMAGE_TAG=$(python3 -c "import re; print(re.sub('[^0-9a-zA-Z]+', '-', '${CIRCLE_BRANCH}').lower())")
            echo "IMAGE_TAG: ${IMAGE_TAG}"
            bash bash-scripts/images/build-docker-images.sh
      - run:
          name: Docker-Compose Tests Local
          command: |
            set -x
            export IMAGE_TAG=$(python3 -c "import re; print(re.sub('[^0-9a-zA-Z]+', '-', '${CIRCLE_BRANCH}').lower())")
            echo "IMAGE_TAG: ${IMAGE_TAG}"
            export TESTERUSER_PASSWORD=entendre-wist-surgeon
            bash bash-scripts/testing/test-local-image-docker-compose-stack.sh
      - run:
          name: Push to ECR
          command: |
            set -x
            export IMAGE_TAG=$(python3 -c "import re; print(re.sub('[^0-9a-zA-Z]+', '-', '${CIRCLE_BRANCH}').lower())")
            echo "IMAGE_TAG: ${IMAGE_TAG}"
            export ECR_ID=421987441365
            export ECR_REGION=us-east-2
            $(aws ecr get-login --no-include-email --region ${ECR_REGION})
            docker tag ui ${ECR_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/stellarbot/ui:${IMAGE_TAG}
            docker tag django ${ECR_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/stellarbot/django:${IMAGE_TAG}
            docker tag api-gateway ${ECR_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/stellarbot/api-gateway:${IMAGE_TAG}
            docker push ${ECR_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/stellarbot/ui:${IMAGE_TAG}
            docker push ${ECR_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/stellarbot/django:${IMAGE_TAG}
            docker push ${ECR_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/stellarbot/api-gateway:${IMAGE_TAG}
      - run:
          name: Docker-Compose Tests Tagged
          command: |
            set -x
            export IMAGE_TAG=$(python3 -c "import re; print(re.sub('[^0-9a-zA-Z]+', '-', '${CIRCLE_BRANCH}').lower())")
            echo "IMAGE_TAG: ${IMAGE_TAG}"
            export ECR_ID=421987441365
            export ECR_REGION=us-east-2
            export ROOT_PATH=.
            docker system prune -af --volumes
            docker build -t stacktest -f docker/stacktest/Dockerfile .
            export TESTERUSER_PASSWORD=entendre-wist-surgeon
            bash bash-scripts/testing/test-tagged-image-docker-compose-stack.sh

  k8s_stack_tests:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          version: '20.10.2'
      - run:
          name: Build Stack Tester Image
          command: |
            set -x
            docker build -t stacktest -f docker/stacktest/Dockerfile .
      - run:
          name: Build and Test K8s Stack
          command: |
            set -x
            export IMAGE_TAG=$(python3 -c "import re; print(re.sub('[^0-9a-zA-Z]+', '-', '${CIRCLE_BRANCH}').lower())")
            echo "IMAGE_TAG: ${IMAGE_TAG}"
            export SOURCE_PATH="kubernetes/us-east-2/dev"
            echo "SOURCE_PATH: ${SOURCE_PATH}"
            source ${SOURCE_PATH}/environment.sh
            export STACK_NAME="ci-${TRAVIS_BUILD_NUMBER}-${IMAGE_TAG}"
            echo "STACK_NAME: ${STACK_NAME}"
            export CONFIG_PATH='kubernetes/stack-config/test'
            export ROOT_PATH=.
            export TESTERUSER_PASSWORD=entendre-wist-surgeon
            echo "-- Attempting to pull kubeconfig..."
            bash bash-scripts/k8s-clusters/pull-kube-config.sh
            if [ -f "${SOURCE_PATH}/cluster/kubecfg.yaml" ]; then
              echo "-- Attempting to validate cluster..."
              bash bash-scripts/k8s-clusters/validate-cluster.sh
              echo "-- Deploying K8s app-stack to ${CLUSTER_REGION}..."
              bash bash-scripts/app-stacks/deploy-k8s-app-stack.sh
              # this is inelegant, but avoids DNS cacheing problems in test script
              echo "-- Sleeping 120 seconds..."
              sleep 120
              echo "-- Running API integration-tests against K8s app-stack..."
              bash bash-scripts/testing/test-kubernetes-stack.sh
              echo "-- Destroying app-stack..."
              bash bash-scripts/app-stacks/destroy-k8s-app-stack.sh
              echo "-- Kubernetes-stack integration tests succeeded."
            else
              echo "-- Kubernetes cluster not found, so not running K8s tests."
            fi

  prod_k8s_stack_deployment:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          version: '20.10.2'
      - run:
          name: Build Stack Tester Image
          command: |
            set -x
            docker build -t stacktest -f docker/stacktest/Dockerfile .
      - run:
          name: Build and Test Production K8s Stack
          command: |
            set -x
            export IMAGE_TAG=master
            echo "IMAGE_TAG: ${IMAGE_TAG}"
            export SOURCE_PATH="kubernetes/us-east-2/dev"
            echo "SOURCE_PATH: ${SOURCE_PATH}"
            source ${SOURCE_PATH}/environment.sh
            export STACK_NAME=${IMAGE_TAG}
            echo "STACK_NAME: ${STACK_NAME}"
            export CONFIG_PATH='kubernetes/stack-config/test'
            export ROOT_PATH=.
            export TESTERUSER_PASSWORD=entendre-wist-surgeon
            echo "-- Attempting to pull kubeconfig..."
            bash bash-scripts/k8s-clusters/pull-kube-config.sh
            if [ -f "${SOURCE_PATH}/cluster/kubecfg.yaml" ]; then
              echo "-- Attempting to validate cluster..."
              bash bash-scripts/k8s-clusters/validate-cluster.sh
              echo "-- Deploying K8s app-stack to ${CLUSTER_REGION}..."
              bash bash-scripts/app-stacks/deploy-k8s-app-stack.sh
              echo "-- Sleeping 120 seconds..."
              sleep 120
              echo "-- Running API integration-tests against '${IMAGE_TAG}' app-stack..."
              bash bash-scripts/testing/test-kubernetes-stack.sh
              echo "-- Kubernetes-stack integration tests succeeded."
            else
              echo "-- Kubernetes cluster not found, so not deploying k8s stack."
            fi

  # prod_stack_deployment:
  #   <<: *defaults
  #   steps:
  #     - checkout
  #     - setup_remote_docker:
  #         version: '20.10.2'
  #     - run:
  #         name: Build and Test Production EC2/Docker-Compose Stack
  #         command: |
  #           set -x
  #           export REGION=us-east-1
  #           export DEPLOYMENT_TYPE=production
  #           export R53_ZONE=Z1CDZE44WDSMXZ
  #           export AWS_KEY_NAME=devops-toolkit-key
  #           export ROOT_PATH=/root/project
  #           docker build -t stacktest -f docker/stacktest/Dockerfile .
  #           bash bash-scripts/legacy-aws/deploy-docker-compose-ec2-rds-stack.sh
  #           sleep 180
  #           docker run -e SERVICE='https://master.stellarbotdev.com/api/v0.1' -e TESTERUSER_PASSWORD stacktest ./integration-tests.sh


workflows:
  version: 2
  build-and-deploy:
    jobs:
      - python_linting
      - javascript_linting
      - image_build_test_push:
          requires:
            - python_linting
            - javascript_linting
      - k8s_stack_tests:
          requires:
            - image_build_test_push
      - prod_k8s_stack_deployment:
          requires:
            - k8s_stack_tests
          filters:
            branches:
              only:
                - master
